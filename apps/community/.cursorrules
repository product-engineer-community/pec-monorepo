# CursorRules File

**Version:** 1.0

**Description:**  
This is a custom rule set for the Cursor editor designed for projects based on FSD (Feature-Sliced Design). It includes naming conventions for layers and segments, guidelines for separation of responsibilities, and standards for code organization.

---

## Layers

### app
- **Description:**  
  Project-specific global settings and components (e.g., AppProvider, global themes/routing, etc.).
- **Allowed Segments:**  
  `ui`, `api`, `model`, `lib`, `config`

### entities
- **Description:**  
  Core business entity-related code. Contains pure functions, data models, and read-only components that must remain pure.
- **Allowed Segments:**  
  `ui`, `api`, `model`, `lib`, `config`
- **Constraints:**  
  Functions must be pure and free of side effects.

### features
- **Description:**  
  Code responsible for specific business features (e.g., user actions, state changes), organized around one primary user action.
- **Allowed Segments:**  
  `ui`, `api`, `model`, `lib`, `config`
- **Constraints:**  
  UI components should only receive domain data, and event handlers or style-related props should only be allowed from shared/ui.

### widgets
- **Description:**  
  Reusable composite UI blocks that combine various features or entities into independent, relocatable components.
- **Allowed Segments:**  
  `ui`, `api`, `model`, `lib`, `config`
- **Constraints:**  
  Focus mainly on UI composition, minimizing any complex business logic.

### pages
- **Description:**  
  The area responsible for overall page layout and structure, composed of a combination of several layers (entities, features, widgets, etc.).
- **Allowed Segments:**  
  `ui`, `api`, `model`, `lib`, `config`
- **Constraints:**  
  Should include page-level components, routes, and types.

### shared
- **Description:**  
  Common components, utilities, and configurations that can be reused across multiple projects.
- **Allowed Segments:**  
  `ui`, `api`, `model`, `lib`, `config`
- **Constraints:**  
  Must be highly generic and aimed at reuse both within and outside the project.

---

## Segments

### api
- **Description:**  
  Code responsible for external communication and data fetching (e.g., CRUD API calls, fetch, axios configurations, etc.).
- **Constraints:**  
  Should be written predictably by directly using HTTP methods and resource concepts.

### config
- **Description:**  
  A collection of constants, configuration values, and environment variables that do not affect code behavior.
- **Constraints:**  
  Changes infrequently and only includes configuration values that apply across the project.

### model
- **Description:**  
  The area that defines business logic, state management, and domain types and interfaces.
- **Constraints:**  
  Must include pure functions, custom hooks, and complex business rules, strictly adhering to the Single Responsibility Principle (SRP).

### lib
- **Description:**  
  A collection of generic utility functions and helpers that are independent of any specific business domain.
- **Constraints:**  
  Should be type-independent and have minimal dependencies on other modules.

### ui
- **Description:**  
  Presentation components that purely render to the screen (e.g., `.tsx`, `.vue`, `.svelte` files).
- **Constraints:**  
  Should display data without managing state or side effects whenever possible.

---

## Rules

1. **Layer Folder Structure**  
   - **Match:** `**/{app,entities,features,widgets,pages,shared}/**`  
   - **Description:**  
     Within a layer folder, the structure must contain at least one of the segments below.
   - **Must Contain:**  
     `api`, `config`, `model`, `lib`, `ui`
   - **Note:**  
     A segment folder may be omitted if necessary, but the basic principle is that each area’s responsibilities must be clearly separated.

2. **Entities Purity**  
   - **Match:** `**/entities/**`  
   - **Description:**  
     Files in the entities area must remain pure and must not include side effects or state management.
   - **Constraints:**  
     All functions must be pure and must not contain external API calls or state-changing logic.

3. **Feature Components**  
   - **Match:** `**/features/**`  
   - **Description:**  
     Components in the features area include all UI and logic related to a single primary user action.
   - **Constraints:**  
     Components should only receive domain data, and event handlers or style-related props should not be passed directly.

4. **Widgets Composition**  
   - **Match:** `**/widgets/**`  
   - **Description:**  
     The widgets area contains reusable UI blocks that combine multiple features or entities.
   - **Constraints:**  
     Should include only minimal business logic, focusing primarily on UI composition.

5. **Page Structure**  
   - **Match:** `**/pages/**`  
   - **Description:**  
     The pages area contains code related to overall page layout and structure, composed of a combination of several layers.
   - **Constraints:**  
     Should include page-specific state, routing, and layout-related code, while delegating finer details to the layers above.

6. **Shared Components**  
   - **Match:** `**/shared/**`  
   - **Description:**  
     The shared area includes highly reusable components and utilities.
   - **Constraints:**  
     Should be written for reuse across multiple projects, not just for project-specific purposes.

---

## Naming Conventions

- **Layer Names:**  
  `app`, `entities`, `features`, `widgets`, `pages`, `shared`
- **Segment Names:**  
  `api`, `config`, `model`, `lib`, `ui`
- **Enforcement:**  
  The basic names for layers and segments must be used as-is without modification or extension (e.g., `features/user/ui`, `entities/product/model`, etc.).

---

## Development Guidelines

### Architecture Principles
- **Upward Dependency:**  
  Higher layers may only depend on lower layers (app → widgets → features → entities → shared).
- **No Horizontal Dependency:**  
  No dependencies are allowed between components within the same layer (e.g., one feature should not depend on another feature).
- **Lower Layer Independence:**  
  Lower layers should not be aware of higher layers.

### Feature Slice Structure
- **Folders:**  
  `api`, `model`, `ui`
- **Description:**  
  Each feature is organized into the following segments.
- **Example:**
  ```plaintext
  feature/
  ├── api/        # External communication logic
  │   ├── index.ts
  │   └── [feature-name].ts
  ├── model/      # Business logic
  │   ├── index.ts
  │   └── types.ts
  ├── ui/         # Components
  │   ├── index.ts
  │   └── [ComponentName].tsx
  └── index.ts    # Public API
  ```

### Naming Conventions for Components
- **Components:** Use **PascalCase**.
- **Utility Hooks:** Use **camelCase**.
- **Types/Interfaces:** Use **PascalCase** followed by `.types.ts`.

### Feature Implementation Steps
1. **Step 1:** Determine the appropriate layer for the feature.
2. **Step 2:** Create the slice and define its structure.
3. **Step 3:** Manage dependencies while adhering to layer principles.
4. **Step 4:** Design the Public API via `index.ts`.

---

## Additional Guidelines

- **File Length:**  
  If a file exceeds 200–300 lines, split it into smaller modules for easier management.  
  *Note:* As the code grows, scrolling and navigation become difficult, so natural separation is necessary.
- **Layer Dependencies:**  
  Dependencies between layers should flow only from higher layers to lower layers.  
  *Note:* Lower layers must not reference higher layers.
- **Team Consensus:**  
  Ensure that the responsibilities for each layer/segment are clearly defined and agreed upon within the team.  
  *Note:* FSD is more about team consensus and consistency than about a single correct answer.
- **UI Components:**  
  Use **shadcn** for UI components. Any additional required components should be installed via **shadcn/ui**.  
  *Note:* shadcn-related settings are already configured in the project.
- **UI Standards:**  
  UI components must primarily use **shadcn/ui**.  
  *Note:* shadcn-related configurations are already applied in the project.
